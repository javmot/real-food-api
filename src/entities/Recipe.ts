import { ObjectType, Field, ID } from "type-graphql";
import { prop, arrayProp, index, getModelForClass } from "@typegoose/typegoose";
import { Ref } from "../types";
import { User } from "./User";
import { RecipeStep } from "./RecipeStep";
import { FoodItem } from "./FoodItem";
import { RecipeCategory } from "./RecipeCategory";

@index({ title: 1, userId: 1 }, { unique: true })
@ObjectType({ description: "The Recipe model" })
export class Recipe {
	@Field(() => ID)
	// Autogenerated key by Mongo. Graphql not nullable
	id?: string;

	@Field()
	@prop({ required: true })
	title!: string;

	@Field()
	@prop({ required: true })
	time!: string;

	@Field({ nullable: true })
	@prop()
	img?: string;

	@Field((_type) => String)
	@prop({ ref: RecipeCategory, required: true })
	categoryId!: Ref<RecipeCategory>;

	@Field((_type) => RecipeStep)
	@arrayProp({ items: RecipeStep, required: true })
	steps!: RecipeStep[];

	@Field((_type) => FoodItem)
	@arrayProp({ items: FoodItem, required: true })
	ingredients!: FoodItem[];

	@Field((_type) => String)
	@prop({ ref: User, required: true })
	userId!: Ref<User>;
}

export const RecipeModel = getModelForClass(Recipe);
